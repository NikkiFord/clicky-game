{"version":3,"sources":["images/game-logo.png","images/game-tiles/1.jpg","images/game-tiles/2.jpg","images/game-tiles/3.jpg","images/game-tiles/4.jpg","images/game-tiles/5.jpg","images/game-tiles/6.jpg","images/game-tiles/7.jpg","images/game-tiles/8.jpg","images/game-tiles/9.jpg","images/game-tiles/10.jpg","images/game-tiles/11.jpg","images/game-tiles/12.jpg","components/ScoreBar/index.jsx","components/GameGrid/index.jsx","components/Footer/index.jsx","Game.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","ScoreBar","score","maxScore","Container","fluid","className","Row","Col","Image","src","logo","GameGrid","useState","cat1","cat2","cat3","cat4","cat5","cat6","cat7","cat8","cat9","cat10","cat11","cat12","tiles","setTiles","clickedTiles","setClickedTiles","setScore","setMaxScore","useEffect","document","title","tileClick","tile","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleTiles","includes","alert","newScore","map","key","onClick","rounded","Footer","style","width","height","href","Game","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,uC,sBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,2SC6B5BC,EAvBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACf,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,aACzB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKF,UAAU,oDACb,kBAACG,EAAA,EAAD,CAAOH,UAAU,OAAOI,IAAKC,MAC7B,wBAAIL,UAAU,QAAd,mBAES,IAAVJ,GAA4B,IAAbC,GACd,kBAACK,EAAA,EAAD,CAAKF,UAAU,oDACb,gEAGFJ,EAAQ,GAAKC,EAAW,IACxB,kBAACK,EAAA,EAAD,CAAKF,UAAU,oDACb,sCACUJ,EADV,WACyBC,O,4MCiFpBS,MAnFE,WAAO,IAAD,EACKC,mBAAS,CACjCC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,MAbmB,mBACdC,EADc,KACPC,EADO,OAemBd,mBAAS,IAf5B,mBAede,EAfc,KAeAC,EAfA,OAgBKhB,mBAAS,GAhBd,mBAgBdX,EAhBc,KAgBP4B,EAhBO,OAiBWjB,mBAAS,GAjBpB,mBAiBdV,EAjBc,KAiBJ4B,EAjBI,KAmBrBC,qBAAU,WACRC,SAASC,MAAT,iBAA2BhC,EAA3B,mBAA2CC,KAC1C,CAACD,EAAOC,IAEX,IAAMgC,EAAY,SAACC,GAEjB,GADAT,EAuCJ,SAAsBU,GACpB,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKzB,KAAO,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAxDIQ,CAAanB,IAClBE,EAAakB,SAASV,GAIxB,OAHAW,MAAM,6BAAD,OAA8B7C,IACnC4B,EAAS,QACTD,EAAgB,IAGlBA,EAAgB,GAAD,mBAAKD,GAAL,CAAmBQ,KAClC,IAAMY,EAAW9C,EAAQ,EACzB4B,EAASkB,GACLA,EAAW7C,GACb4B,EAAYiB,GAEVA,IAAatB,EAAMe,SACrBM,MAAM,6BACNjB,EAAS,GACTC,EAAY,GACZF,EAAgB,MAIpB,OACE,oCACE,kBAAC,EAAD,CAAU3B,MAAOA,EAAOC,SAAUA,IAClC,yBAAKG,UAAU,0DACZoB,EAAMuB,KAAI,SAACb,GAAD,OACT,kBAAC3B,EAAA,EAAD,CACEyC,IAAKd,EACL9B,UAAU,OACVI,IAAK0B,EACLe,QAAS,kBAAMhB,EAAUC,IACzBgB,SAAO,UCrDJC,G,MAhBA,kBACb,4BAAQ/C,UAAU,kEAChB,6BACE,kBAACG,EAAA,EAAD,CACE6C,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChClD,UAAU,mBACVI,IAAKC,MAEP,6BACE,uBAAG8C,KAAK,+CAAR,kBAAyE,IAD3E,MAEK,uBAAGA,KAAK,gCAAR,mBCDIC,MATf,WACE,OACE,yBAAKJ,MAAO,CAAEK,gBAAiB,YAC7B,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUjC,SAASkC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08f6f7ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game-logo.a2b8cdb7.png\";","module.exports = __webpack_public_path__ + \"static/media/1.fccb4017.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.651e8b63.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.def0ce40.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.d2d17b84.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.dd2adaa6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.03707e38.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.b617c7d7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.465df858.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.5d581eea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.524c8966.jpg\";","module.exports = __webpack_public_path__ + \"static/media/11.70a7c469.jpg\";","module.exports = __webpack_public_path__ + \"static/media/12.9d455c65.jpg\";","import React from \"react\";\nimport \"./styles.css\";\nimport logo from \"../../images/game-logo.png\";\n\nimport { Container, Row, Col, Image } from \"../../bootstrap-components\";\n\nconst ScoreBar = ({ score, maxScore }) => (\n  <Container fluid className=\"score-bar\">\n    <Row>\n      <Col className=\"d-flex justify-content-center align-items-center\">\n        <Image className=\"logo\" src={logo} />\n        <h1 className=\"ml-5\">Kitty Clickers</h1>\n      </Col>\n      {score === 0 && maxScore === 0 && (\n        <Col className=\"d-flex justify-content-center align-items-center\">\n          <h3>Click an image to get started!</h3>\n        </Col>\n      )}\n      {(score > 0 || maxScore > 0) && (\n        <Col className=\"d-flex justify-content-center align-items-center\">\n          <h1>\n            Score: {score} | Max: {maxScore}\n          </h1>\n        </Col>\n      )}\n    </Row>\n  </Container>\n);\n\nexport default ScoreBar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nimport { Image } from \"../../bootstrap-components\";\nimport ScoreBar from \"../ScoreBar\";\n\nimport cat1 from \"../../images/game-tiles/1.jpg\";\nimport cat2 from \"../../images/game-tiles/2.jpg\";\nimport cat3 from \"../../images/game-tiles/3.jpg\";\nimport cat4 from \"../../images/game-tiles/4.jpg\";\nimport cat5 from \"../../images/game-tiles/5.jpg\";\nimport cat6 from \"../../images/game-tiles/6.jpg\";\nimport cat7 from \"../../images/game-tiles/7.jpg\";\nimport cat8 from \"../../images/game-tiles/8.jpg\";\nimport cat9 from \"../../images/game-tiles/9.jpg\";\nimport cat10 from \"../../images/game-tiles/10.jpg\";\nimport cat11 from \"../../images/game-tiles/11.jpg\";\nimport cat12 from \"../../images/game-tiles/12.jpg\";\n\nconst GameGrid = () => {\n  const [tiles, setTiles] = useState([\n    cat1,\n    cat2,\n    cat3,\n    cat4,\n    cat5,\n    cat6,\n    cat7,\n    cat8,\n    cat9,\n    cat10,\n    cat11,\n    cat12\n  ]);\n  const [clickedTiles, setClickedTiles] = useState([]);\n  const [score, setScore] = useState(0);\n  const [maxScore, setMaxScore] = useState(0);\n\n  useEffect(() => {\n    document.title = `Score: ${score} | Max: ${maxScore}`;\n  }, [score, maxScore]);\n\n  const tileClick = (tile) => {\n    setTiles(shuffleTiles(tiles));\n    if (clickedTiles.includes(tile)) {\n      alert(`You lost! Your score was: ${score}`);\n      setScore(0);\n      setClickedTiles([]);\n      return;\n    }\n    setClickedTiles([...clickedTiles, tile]);\n    const newScore = score + 1;\n    setScore(newScore);\n    if (newScore > maxScore) {\n      setMaxScore(newScore);\n    }\n    if (newScore === tiles.length) {\n      alert(\"Congratulations, you won!\");\n      setScore(0);\n      setMaxScore(0);\n      setClickedTiles([]);\n    }\n  };\n\n  return (\n    <>\n      <ScoreBar score={score} maxScore={maxScore} />\n      <div className=\"d-flex flex-wrap justify-content-center tile-container\">\n        {tiles.map((tile) => (\n          <Image\n            key={tile}\n            className=\"tile\"\n            src={tile}\n            onClick={() => tileClick(tile)}\n            rounded\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nfunction shuffleTiles(array) {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport default GameGrid;\n","import React from \"react\";\nimport logo from \"../../images/game-logo.png\";\nimport Image from \"react-bootstrap/Image\";\nimport \"./styles.css\";\n\nconst Footer = () => (\n  <footer className=\"d-flex flex-column justify-content-end align-items-center pb-3\">\n    <div>\n      <Image\n        style={{ width: \"30px\", height: \"30px\" }}\n        className=\"logo text-center\"\n        src={logo}\n      />\n      <div>\n        <a href=\"https://github.com/nikkiford/kitty-clickers\">Kitty Clickers</a>{\" \"}\n        by <a href=\"https://github.com/nikkiford\">Nikki Ford</a>\n      </div>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Game.css\";\nimport GameGrid from \"./components/GameGrid\";\nimport Footer from \"./components/Footer\";\n\nfunction Game() {\n  return (\n    <div style={{ backgroundColor: \"#f8d5e3\" }}>\n      <GameGrid />\n      <Footer />\n    </div>\n  );\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport Game from \"./Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}